/*
 * level_tables.h
 *
 *  Created on: Jun 1, 2025
 *      Author: Raman
 *
 *  Описание:
 *  Интерфейс для работы с калибровочными таблицами уровня топлива и масла,
 *  с возможностью хранения/загрузки во внешней SPI-флеш-памяти W25Qxx.
 *  Таблицы используются для пересчёта "сырых" процентов датчика в литры.
 */

#ifndef LEVEL_TABLES_H
#define LEVEL_TABLES_H

#include <stdint.h>
#include <stddef.h>

// --- Размеры таблиц ---
// Количество точек калибровки для топлива и масла.
// Чем больше точек, тем точнее пересчёт, но больше памяти.
#define FUEL_LEVEL_POINTS 16
#define OIL_LEVEL_POINTS  16

// --- Глобальные переменные ---
// Текущие калибровочные таблицы и максимальные значения.
// После загрузки из флеш или инициализации по умолчанию содержат актуальные данные.
extern float fuelLevelTable[FUEL_LEVEL_POINTS];  // Таблица топлива (литры)
extern float fuelLevelMax;                       // Максимальный объём топлива (литры)
extern float oilLevelTable[OIL_LEVEL_POINTS];    // Таблица масла (литры)
extern float oilLevelMax;                        // Максимальный объём масла (литры)

// ================== ФУНКЦИИ ДЛЯ ТОПЛИВА ==================

/**
 * @brief Пересчитать "сырое" значение датчика (0...100%) в литры топлива.
 *        Использует кусочно-линейную интерполяцию по таблице fuelLevelTable.
 * @param raw_value  Значение датчика в процентах (0...100)
 * @return           Пересчитанное значение в литрах
 */
float fuel_level_get_liters(float raw_value);

/**
 * @brief Задать пользовательскую таблицу пересчёта для топлива.
 *        Копирует не больше FUEL_LEVEL_POINTS значений.
 * @param table  Указатель на массив float с новыми значениями (литры)
 * @param len    Количество элементов в массиве table
 */
void fuel_level_set_table(const float *table, size_t len);

/**
 * @brief Получить текущую таблицу пересчёта топлива.
 *        Копирует не больше max_len значений в user_table.
 * @param user_table  Указатель на массив для копирования
 * @param max_len     Максимальное количество элементов для копирования
 * @return            Фактическое число скопированных элементов
 */
size_t fuel_level_get_table(float *user_table, size_t max_len);

/**
 * @brief Сохранить таблицу топлива и максимальное значение во внешнюю флеш-память.
 *        Используется контроль целостности (CRC).
 */
void fuel_level_save_table(void);

/**
 * @brief Загрузить таблицу топлива и максимальное значение из внешней флеш-памяти.
 *        Если данных нет или они повреждены — используются значения по умолчанию.
 */
void fuel_level_load_table(void);

// ================== ФУНКЦИИ ДЛЯ МАСЛА ==================

/**
 * @brief Пересчитать "сырое" значение датчика (0...100%) в литры масла.
 *        Использует кусочно-линейную интерполяцию по таблице oilLevelTable.
 * @param raw_value  Значение датчика в процентах (0...100)
 * @return           Пересчитанное значение в литрах
 */
float oil_level_get_liters(float raw_value);

/**
 * @brief Задать пользовательскую таблицу пересчёта для масла.
 *        Копирует не больше OIL_LEVEL_POINTS значений.
 * @param table  Указатель на массив float с новыми значениями (литры)
 * @param len    Количество элементов в массиве table
 */
void oil_level_set_table(const float *table, size_t len);

/**
 * @brief Получить текущую таблицу пересчёта масла.
 *        Копирует не больше max_len значений в user_table.
 * @param user_table  Указатель на массив для копирования
 * @param max_len     Максимальное количество элементов для копирования
 * @return            Фактическое число скопированных элементов
 */
size_t oil_level_get_table(float *user_table, size_t max_len);

/**
 * @brief Сохранить таблицу масла и максимальное значение во внешнюю флеш-память.
 *        Используется контроль целостности (CRC).
 */
void oil_level_save_table(void);

/**
 * @brief Загрузить таблицу масла и максимальное значение из внешней флеш-памяти.
 *        Если данных нет или они повреждены — используются значения по умолчанию.
 */
void oil_level_load_table(void);

#endif // LEVEL_TABLES_H


