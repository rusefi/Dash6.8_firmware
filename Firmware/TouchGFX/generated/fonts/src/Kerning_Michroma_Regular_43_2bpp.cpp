#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_Michroma_Regular_43_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0054, -7 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -7)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0059, -6 },  // (First char = [0x0059, Y], Second char = [0x0041, A], Kerning dist = -6)
    { 0x004C, -8 },  // (First char = [0x004C, L], Second char = [0x0054, T], Kerning dist = -8)
    { 0x0041, -5 },  // (First char = [0x0041, A], Second char = [0x0057, W], Kerning dist = -5)
    { 0x004C, -6 },  // (First char = [0x004C, L], Second char = [0x0059, Y], Kerning dist = -6)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0057, -5 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -5)
    { 0x0058, -3 },  // (First char = [0x0058, X], Second char = [0x0061, a], Kerning dist = -3)
    { 0x006B, -2 },  // (First char = [0x006B, k], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0057, -5 },  // (First char = [0x0057, W], Second char = [0x0063, c], Kerning dist = -5)
    { 0x0058, -3 },  // (First char = [0x0058, X], Second char = [0x0063, c], Kerning dist = -3)
    { 0x006B, -2 },  // (First char = [0x006B, k], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0057, -5 },  // (First char = [0x0057, W], Second char = [0x0064, d], Kerning dist = -5)
    { 0x0058, -3 },  // (First char = [0x0058, X], Second char = [0x0064, d], Kerning dist = -3)
    { 0x006B, -2 },  // (First char = [0x006B, k], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0058, -3 },  // (First char = [0x0058, X], Second char = [0x0065, e], Kerning dist = -3)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0057, -5 },  // (First char = [0x0057, W], Second char = [0x0067, g], Kerning dist = -5)
    { 0x0058, -3 },  // (First char = [0x0058, X], Second char = [0x0067, g], Kerning dist = -3)
    { 0x006B, -2 },  // (First char = [0x006B, k], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0057, -5 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -5)
    { 0x0058, -3 },  // (First char = [0x0058, X], Second char = [0x006F, o], Kerning dist = -3)
    { 0x006B, -2 },  // (First char = [0x006B, k], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0057, -5 },  // (First char = [0x0057, W], Second char = [0x0071, q], Kerning dist = -5)
    { 0x0058, -3 },  // (First char = [0x0058, X], Second char = [0x0071, q], Kerning dist = -3)
    { 0x006B, -2 },  // (First char = [0x006B, k], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0078, -2 },  // (First char = [0x0078, x], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0071, q], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0077, w], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0077, w], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x0078, x], Kerning dist = -2)
    { 0x0065, -2 },  // (First char = [0x0065, e], Second char = [0x0078, x], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0078, x], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x0078, x], Kerning dist = -2)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0079, y], Kerning dist = -1)
};
